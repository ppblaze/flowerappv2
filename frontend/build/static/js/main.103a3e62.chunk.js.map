{"version":3,"sources":["images/picture.svg","App.js","serviceWorker.js","index.js"],"names":["App","hiddenFileInput","React","useRef","useState","pic","image","setImage","flower","setFlower","resFlower","setResFlower","uploadImage","a","formData","FormData","append","axios","post","headers","then","res","console","log","data","prediction","flowers","catch","style","width","height","background","padding","Row","sm","className","margin","Col","borderRadius","backgroundColor","boxShadow","paddingBottom","src","maxHeight","maxWidth","alt","Button","onClick","event","preventDefault","current","click","variant","onChange","URL","createObjectURL","target","files","type","ref","display","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.103a3e62.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/picture.3ba3db82.svg\";","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Row, Col, Button } from \"react-bootstrap\";\nimport pic from \"./images/picture.svg\";\nimport axios from \"axios\";\n\nfunction App() {\n  const hiddenFileInput = React.useRef(null);\n  const [image, setImage] = React.useState(pic);\n  const [flower, setFlower] = React.useState(null);\n  const [resFlower, setResFlower] = React.useState(\"\")\n\n  const handleClick = (event) => {\n    event.preventDefault();\n    hiddenFileInput.current.click();\n  };\n\n  const handleChange = (event) => {\n    event.preventDefault();\n    setResFlower(\"Click upload dude!!!\")\n    setImage(URL.createObjectURL(event.target.files[0]));\n    setFlower(event.target.files[0]);\n  };\n\n  const uploadImage = async () => {\n    if (flower) {\n      var formData = new FormData();\n      formData.append(\"file\", flower);\n       await axios\n        .post(\"http://35.223.117.5:8000/prediction\", formData, {\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            'Access-Control-Allow-Origin': '*'\n          },\n        })\n        .then(function (res) {\n          console.log(\"SUCCESS!!\");\n          console.log(res.data.prediction.flowers);\n          setResFlower(res.data.prediction.flowers)\n\n        })\n        .catch(function () {\n          console.log(\"FAILURE!!\");\n        });\n    \n    }\n  };\n  return (\n    <>\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100vh\",\n          background: \"#dbebfc\",\n          padding: \"20px\",\n        }}\n      >\n        <Row\n          sm\n          className=\"h-20 w-100 d-flex justify-content-center align-content-center\"\n          style={{ margin: 0 }}\n        >\n          <Col\n            sm\n            className=\"w-100 d-flex justify-content-center align-content-center\"\n          >\n            <h1>FLOWERs API</h1>\n          </Col>\n        </Row>\n        <div\n          className=\"h-80 w-100 d-flex justify-content-center align-content-center\"\n          style={{ margin: 0 }}\n        >\n          <Row\n            sm\n            className=\"d-flex justify-content-center align-content-center\"\n            style={{ width: \"400px\", height: \"550px\", padding: \"20px\" }}\n          >\n            <Col\n              sm\n              style={{\n                width: \"100%\",\n                height: \"100%\",\n                borderRadius: \"30px\",\n                backgroundColor: \"white\",\n                padding: \"10px\",\n                boxShadow: \"2px 3px 5px 0px rgba(158,158,158,1)\",\n              }}\n            >\n              <Row\n                sm\n                style={{\n                  width: \"100%\",\n                  height: \"70%\",\n                  margin: 0,\n                  paddingBottom: 20,\n                }}\n              >\n                <Col\n                  sm\n                  className=\"d-flex justify-content-center align-content-center\"\n                  style={{ width: \"100%\", height: \"100%\", margin: 0 }}\n                >\n                  <img\n                    src={image}\n                    style={{ maxHeight: \"100%\", maxWidth: \"100%\" }}\n                    alt=\"pic\"\n                  />\n                </Col>\n              </Row>\n                            <Row\n                sm\n                className=\"w-100 h-10\"\n                style={{ margin: 0, paddingBottom: 20 }}\n              >\n                <Col sm className=\"w-100 h-100\">\n                <h5>Your flower :{\"  \"+resFlower}</h5>\n                </Col>\n              </Row>\n              <Row\n                sm\n                className=\"w-100 h-10\"\n                style={{ margin: 0, paddingBottom: 20 }}\n              >\n                <Col sm className=\"w-100 h-100\">\n                  <Button\n                    onClick={handleClick}\n                    variant=\"primary\"\n                    className=\"w-100 h-100\"\n                  >\n                    CHOOSE YOUR FLOWER\n                  </Button>\n                  <input\n                    onChange={handleChange}\n                    type=\"file\"\n                    ref={hiddenFileInput}\n                    style={{ display: \"none\" }}\n                  />\n                </Col>\n              </Row>\n              <Row\n                sm\n                className=\"w-100 h-10\"\n                style={{ margin: 0, paddingBottom: 20 }}\n              >\n                <Col sm className=\"w-100 h-100\">\n                  <Button\n                    onClick={uploadImage}\n                    variant=\"success\"\n                    className=\"w-100 h-100\"\n                  >\n                    UPLOAD\n                  </Button>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}